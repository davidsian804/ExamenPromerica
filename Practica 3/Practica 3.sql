-- CREACION DE LA BASE DE DATOS
CREATE DATABASE Test_Database_GEKO
USE Test_Database_GEKO


--  Tabla TIPO_INFORMACION
CREATE TABLE TIPO_INFORMACION (
COD_TIPO_INFORMACION INT PRIMARY KEY,
NOMBRE VARCHAR(50) NOT NULL
);

-- Tabla TIPO
CREATE TABLE TIPO (
COD_TIPO INT PRIMARY KEY,
NOMBRE VARCHAR(50) NOT NULL
);

-- Tabla FORMATO_MENSAJE
CREATE TABLE FORMATO_MENSAJE (
COD_FORMATO INT PRIMARY KEY,
COD_TIPO INT NOT NULL,
COD_TIPO_INFORMACION INT NOT NULL,
NOMBRE VARCHAR(50) NOT NULL,
REMITENTE VARCHAR(50) NOT NULL,
ASUNTO VARCHAR(50) NOT NULL,
FOREIGN KEY (COD_TIPO) REFERENCES TIPO(COD_TIPO),
FOREIGN KEY (COD_TIPO_INFORMACION) REFERENCES TIPO_INFORMACION(COD_TIPO_INFORMACION)
);

-- Tabla MENSAJE
CREATE TABLE MENSAJE (
COD_MENSAJE INT PRIMARY KEY,
COD_FORMATO INT NOT NULL,
PROYECTO INT NOT NULL,
PRODUCTO INT NOT NULL,
--relaciones con tabla formato_mensajes, proyecto y producto
FOREIGN KEY (COD_FORMATO) REFERENCES FORMATO_MENSAJE(COD_FORMATO),
FOREIGN KEY (PROYECTO) REFERENCES PROYECTO(PROYECTO),
FOREIGN KEY (PRODUCTO) REFERENCES PRODUCTO(PRODUCTO)
);

-- Tabla PRODUCTO_PROYECTO
CREATE TABLE PRODUCTO_PROYECTO (
PROYECTO INT NOT NULL,
PRODUCTO INT NOT NULL,
--relaciones con tabla proyectos y productos
PRIMARY KEY (PROYECTO, PRODUCTO),
FOREIGN KEY (PROYECTO) REFERENCES PROYECTO(PROYECTO),
FOREIGN KEY (PRODUCTO) REFERENCES PRODUCTO(PRODUCTO)
);

-- Tabla PROYECTO
CREATE TABLE PROYECTO (
PROYECTO INT PRIMARY KEY, --opcional puede ser auto incrementable
NOMBRE VARCHAR(50) NOT NULL
);

-- Tabla PRODUCTO
CREATE TABLE PRODUCTO (
PRODUCTO INT PRIMARY KEY,
DESCRIPCION VARCHAR(50) NOT NULL
);

--Claves faltantes para las demas relaciones entre tablas
ALTER TABLE FORMATO_MENSAJE ADD CONSTRAINT FK_FORMATO_TIPO FOREIGN KEY (COD_TIPO) REFERENCES TIPO(COD_TIPO);
ALTER TABLE MENSAJE ADD CONSTRAINT FK_MENSAJE_FORMATO FOREIGN KEY (COD_FORMATO) REFERENCES FORMATO_MENSAJE(COD_FORMATO);
ALTER TABLE PRODUCTO_PROYECTO ADD CONSTRAINT FK_PP_PROYECTO FOREIGN KEY (PROYECTO) REFERENCES PROYECTO(PROYECTO);
ALTER TABLE PRODUCTO_PROYECTO ADD CONSTRAINT FK_PP_PRODUCTO FOREIGN KEY (PRODUCTO) REFERENCES PRODUCTO(PRODUCTO);
ALTER TABLE MENSAJE ADD CONSTRAINT FK_MENSAJE_PROYECTO FOREIGN KEY (PROYECTO) REFERENCES PROYECTO(PROYECTO);
ALTER TABLE MENSAJE ADD CONSTRAINT FK_MENSAJE_PRODUCTO FOREIGN KEY (PRODUCTO) REFERENCES PRODUCTO(PRODUCTO);



-- INSERT a la tabla TIPO_INFORMACION
INSERT INTO TIPO_INFORMACION (COD_TIPO_INFORMACION, NOMBRE)
VALUES
(1, 'mensaje de bienvenida'),
(2, 'mensaje de mora'),
(3, 'mensaje de promoción');
(4, 'mensaje 4');

-- INSERT a la tabla TIPO
INSERT INTO TIPO (COD_TIPO, NOMBRE)
VALUES
(1, 'mensaje de texto'),
(2, 'mail'),
(3, 'mensaje en el estado de cuenta');
(4, 'Tipo 4');

-- INSERT a la tabla FORMATO_MENSAJE
INSERT INTO FORMATO_MENSAJE (COD_FORMATO, COD_TIPO, COD_TIPO_INFORMACION, NOMBRE, REMITENTE, ASUNTO)
VALUES
(1, 1, 2, 'Formato 1', 'juanitoperez1@mail.com', 'Asunto 1'),
(2, 2, 1, 'Formato 2', 'juanitoperez2@mail.com', 'Asunto 2'),
(3, 3, 3, 'Formato 3', 'juanitoperez3@mail.com', 'Asunto 3');
(4, 1, 1, 'Formato 4', 'juanitoperez4@mail.com', 'Asunto 3');

-- INSERT a la tabla PRODUCTO
INSERT INTO PRODUCTO (PRODUCTO, DESCRIPCION)
VALUES
(1, 'Premia Clásica'),
(2, 'Premia Oro'),
(3, 'Premia Platinum');
(4, 'Producto 4');

-- INSERT a la tabla PROYECTO
INSERT INTO PROYECTO (PROYECTO, NOMBRE)
VALUES
(1, 'Premia'),
(2, 'Konmi'),
(3, 'Yujule');
(4, 'Proyecto 4');

-- INSERT a la tabla PRODUCTO_PROYECTO
INSERT INTO PRODUCTO_PROYECTO (PROYECTO, PRODUCTO)
VALUES
(1, 1),
(2, 2),
(3, 3);
(4, 4);

-- INSERT a la tabla MENSAJE
INSERT INTO MENSAJE (COD_MENSAJE, COD_FORMATO, PROYECTO, PRODUCTO)
VALUES
(1, 1, 1, 1),
(2, 2, 2, 1),
(3, 3, 3, 1);
(4, 4, 4, 1);

-- QUERY PARA MOSTRAR PROYECTO Y CODIGO DE PRODUCTO
SELECT P.NOMBRE AS NOMBRE_PROYECTO, PR.PRODUCTO, PR.PROYECTO
FROM PROYECTO P
INNER JOIN PRODUCTO_PROYECTO PR ON P.PROYECTO = PR.PROYECTO
WHERE P.PROYECTO = 1;

-- QUERY PARA MOSTRAR PROYECTO Y NOMBRE DE PRODUCTO
SELECT p.NOMBRE AS 'Nombre del Proyecto', prod.DESCRIPCION AS 'Nombre del Producto'
FROM PROYECTO p
INNER JOIN PRODUCTO_PROYECTO pp ON p.PROYECTO = pp.PROYECTO
INNER JOIN PRODUCTO prod ON pp.PRODUCTO = prod.PRODUCTO
WHERE p.PROYECTO = 1;


-- QUERY PARA MOSTRAR EL CODIGO MENSAJE POR PROYECTO
SELECT m.COD_MENSAJE, p.NOMBRE AS 'Nombre del Proyecto', pr.DESCRIPCION AS 'Nombre del Producto'
FROM MENSAJE m
INNER JOIN FORMATO_MENSAJE fm ON m.COD_FORMATO = fm.COD_FORMATO
INNER JOIN PRODUCTO_PROYECTO pp ON m.PROYECTO = pp.PROYECTO
INNER JOIN PRODUCTO pr ON pp.PRODUCTO = pr.PRODUCTO
INNER JOIN PROYECTO p ON pp.PROYECTO = p.PROYECTO;

-- QUERY PARA MOSTRAR MENSAJE POR PROYECTO
SELECT t.NOMBRE AS 'Nombre del Mensaje', p.NOMBRE AS 'Nombre del Proyecto', prod.DESCRIPCION AS 'Nombre del Producto'
FROM MENSAJE m
INNER JOIN FORMATO_MENSAJE f ON m.COD_FORMATO = f.COD_FORMATO
INNER JOIN TIPO_INFORMACION t ON f.COD_TIPO_INFORMACION = t.COD_TIPO_INFORMACION
INNER JOIN PRODUCTO_PROYECTO pp ON m.PROYECTO = pp.PROYECTO AND m.PRODUCTO = pp.PRODUCTO
INNER JOIN PRODUCTO prod ON pp.PRODUCTO = prod.PRODUCTO
INNER JOIN PROYECTO p ON pp.PROYECTO = p.PROYECTO;



--consulta SQL que devuelva los distintos mensajes que hay, indicando a qué 
--proyecto y producto pertenecen. Pero si el mensaje está en todos los productos de un 
--proyecto, en lugar de mostrar cada producto, debe mostrar el nombre del proyecto y un 
--solo producto que diga “TODOS”.

SELECT t.NOMBRE AS 'Nombre del Mensaje', p.NOMBRE AS 'Nombre del Proyecto', 
       CASE WHEN COUNT(DISTINCT pp.PRODUCTO) = 1 THEN MAX(prod.DESCRIPCION) ELSE 'TODOS' END AS 'Nombre del Producto', 
       f.ASUNTO
FROM MENSAJE m
INNER JOIN FORMATO_MENSAJE f ON m.COD_FORMATO = f.COD_FORMATO
INNER JOIN TIPO_INFORMACION t ON f.COD_TIPO_INFORMACION = t.COD_TIPO_INFORMACION
INNER JOIN PRODUCTO_PROYECTO pp ON m.PROYECTO = pp.PROYECTO
LEFT JOIN PRODUCTO prod ON pp.PRODUCTO = prod.PRODUCTO
INNER JOIN PROYECTO p ON pp.PROYECTO = p.PROYECTO
GROUP BY t.NOMBRE, p.NOMBRE, m.PROYECTO, f.ASUNTO
HAVING COUNT(DISTINCT pp.PRODUCTO) = (SELECT COUNT(*) FROM PRODUCTO_PROYECTO WHERE PROYECTO = m.PROYECTO);
